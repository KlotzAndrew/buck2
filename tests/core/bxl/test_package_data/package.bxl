# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is dual-licensed under either the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree or the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree. You may select, at your option, one of the
# above-listed licenses.

def _get_package_path(ctx: bxl.Context):
    cnode = ctx.configured_targets("root//:dummy")
    configured_label = cnode.label
    label = configured_label.raw_target()
    configured_providers_label = configured_label.with_sub_target([])
    providers_label = label.with_sub_target([])

    asserts.equals(configured_label.package_path, label.package_path)
    asserts.equals(configured_label.package_path, configured_providers_label.package_path)
    asserts.equals(configured_label.package_path, providers_label.package_path)
    asserts.equals(str(configured_label.package_path), "root//")

    bar_dummy_node = ctx.configured_targets("root//bar_dir:bar_dummy")
    bar_dummy_label = bar_dummy_node.label
    asserts.equals(str(bar_dummy_label.package_path), "root//bar_dir")

get_package_path = bxl_main(
    impl = _get_package_path,
    cli_args = {},
)

def _read_package_value_impl(ctx):
    # Get an unconfigured target node
    node = ctx.unconfigured_targets("root//:dummy")
    pkg_path = node.label.package_path

    # Read package values using the package path from node
    value = bxl.read_package_value(pkg_path, "test.key")
    asserts.equals(value, "root_value")

    dict_value = bxl.read_package_value(pkg_path, "test.dict")
    asserts.equals(dict_value["name"], "root_dict")
    asserts.equals(dict_value["value"], 42)

read_package_value = bxl_main(
    impl = _read_package_value_impl,
    cli_args = {},
)

def _read_package_value_from_string_impl(_ctx):
    # Read package values using a package string
    value = bxl.read_package_value("root//sub_dir", "test.key")
    asserts.equals(value, "inner_value")

    dict_value = bxl.read_package_value("root//sub_dir", "test.dict")
    asserts.equals(dict_value["name"], "inner_dict")
    asserts.equals(dict_value["value"], 100)

    val = bxl.read_package_value("root//sub_dir", "test.sub_dir")
    asserts.equals(val, "value")

read_package_value_from_string = bxl_main(
    impl = _read_package_value_from_string_impl,
    cli_args = {},
)

def _read_override_package_value_impl(_ctx):
    value = bxl.read_package_value("root//", "test.key")
    asserts.equals(value, "root_value")

    override_value = bxl.read_package_value("root//sub_dir", "test.key")
    asserts.equals(override_value, "inner_value")

read_override_package_value = bxl_main(
    impl = _read_override_package_value_impl,
    cli_args = {},
)

def _read_package_value_not_found_impl(_ctx):
    # Read a package value that doesn't exist
    value = bxl.read_package_value("root//", "test.non_exist_key")
    asserts.equals(value, None)

read_package_value_not_found = bxl_main(
    impl = _read_package_value_not_found_impl,
    cli_args = {},
)
